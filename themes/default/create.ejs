<!doctype html>
<html class="h-full bg-[#0f1012]">
   <!-- Header component -->
   <%- include('./components/header') %>
   <script src="https://cdn.tailwindcss.com"></script>
   <!-- End header -->
   <script>
      function toggleButtonText(stage) {
        // Toggle text of the "Next" button based on the current stage
        const nextButton = document.getElementById('nextBtn');
        if (stage === 3) {
          nextButton.textContent = 'Create';
        } else {
          nextButton.textContent = 'Continue';
        }
      }
      
      function nextButtonClick() {
        const carousel = document.querySelector('.carousel');
        const currentStage = parseInt(carousel.getAttribute('data-current-stage'));
      
        // Check if it's the final stage
        if (currentStage < 3) {
          // Hide the current stage with a fade transition
          document.getElementById(`stage${currentStage}`).classList.add('opacity-0');
          setTimeout(() => {
            document.getElementById(`stage${currentStage}`).classList.add('hidden');
            document.getElementById(`stage${currentStage}`).classList.remove('opacity-0');
      
            // Show the next stage with a fade transition
            const nextStage = currentStage + 1;
            document.getElementById(`stage${nextStage}`).classList.remove('hidden');
            setTimeout(() => {
              document.getElementById(`stage${nextStage}`).classList.remove('opacity-0');
            }, 50); // Add a small delay to ensure a smooth transition
      
            // Update the data attribute
            carousel.setAttribute('data-current-stage', nextStage);
      
            // Toggle visibility of back button
            toggleBackButtonVisibility(nextStage);
            toggleButtonText(nextStage);
          }, 300); // Adjust the transition duration in milliseconds
        } else {
          redirectWithQueryParams()
        }
      }
      
      function backButtonClick() {
        const carousel = document.querySelector('.carousel');
        const currentStage = parseInt(carousel.getAttribute('data-current-stage'));
      
        // Check if it's not the first stage
        if (currentStage > 1) {
          // Hide the current stage with a fade transition
          document.getElementById(`stage${currentStage}`).classList.add('opacity-0');
          setTimeout(() => {
            document.getElementById(`stage${currentStage}`).classList.add('hidden');
            document.getElementById(`stage${currentStage}`).classList.remove('opacity-0');
      
            // Show the previous stage with a fade transition
            const prevStage = currentStage - 1;
            document.getElementById(`stage${prevStage}`).classList.remove('hidden');
            setTimeout(() => {
              document.getElementById(`stage${prevStage}`).classList.remove('opacity-0');
            }, 50); // Add a small delay to ensure a smooth transition
      
            // Update the data attribute
            carousel.setAttribute('data-current-stage', prevStage);
      
            // Toggle visibility of back button
            toggleBackButtonVisibility(prevStage);
          }, 300); // Adjust the transition duration in milliseconds
        } else {
          // No logic here 
        }
      }
      
      function toggleBackButtonVisibility(stage) {
        // Toggle visibility of the back button based on the current stage
        const backButton = document.getElementById('backBtn');
        if (stage === 1) {
          backButton.classList.add('hidden');
        } else {
          backButton.classList.remove('hidden');
        }
      }
      
      document.addEventListener('DOMContentLoaded', function () {
        // Initial check for visibility when the DOM is loaded
        const carousel = document.querySelector('.carousel');
        const currentStage = parseInt(carousel.getAttribute('data-current-stage'));
        toggleBackButtonVisibility(currentStage);
      });
   </script>
   <body class="h-full" style="font-family: 'Space Grotesk'">
      <div>
         <!-- Sidebar component -->
         <%- include('./components/sidebar') %>
         <!-- End sidebar -->
         <main id="content">
            <% if (req.query.err && req.query.err !== "none") { %>
            <div class="border border-amber-400/10 bg-amber-400/5 p-4">
               <div class="flex">
                  <div class="flex-shrink-0">
                     <svg class="h-6 w-6 text-amber-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd"
                           d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z"
                           clip-rule="evenodd"></path>
                     </svg>
                  </div>
                  <div class="ml-3">
                     <p class="text-sm text-amber-400">
                        An error was encountered: <code><%= req.query.err %></code>
                     </p>
                  </div>
               </div>
            </div>
            <% } %>
            <div class="carousel" data-current-stage="1">
               <div class="transition-all" id="stage1">
                  <!-- Stage 1 -->
                  <nav class="flex items-center justify-center bg-zinc-700/10 border-b border-white/5 p-4" aria-label="Progress">
                     <p class="text-sm font-medium text-white">Server details <span class="text-zinc-500 text-normal ml-1">1 / 3</span></p>
                     <ol role="list" class="ml-8 flex items-center space-x-5">
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-zinc-600/50"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-zinc-600/50"></a></li>
                     </ol>
                  </nav>
                  <div class="pb-2 p-10">
                     <h2 class="text-base font-semibold leading-7 text-white">Server details</h2>
                     <p class="mt-1 pb-8 text-sm leading-6 text-zinc-500">Enter a name for your server.</p>
                  </div>
                  <div class="pb-2 px-10 pt-8 pb-8 border-t border-white/5">
                     <div class="grid grid-cols-1 gap-x-6 sm:grid-cols-6">
                        <div class="sm:col-span-3">
                           <label for="first-name" class="block text-sm font-normal leading-6 text-white mb-2">Server name</label>
                           <div class="mt-2">
                              <input type="text" name="name" class="block w-96 rounded-full border-none py-3 pl-6 bg-zinc-600/20 text-white ring-1 ring-inset ring-zinc-600/30 placeholder:text-zinc-500 focus:ring-1 focus:ring-inset focus:ring-blue-400 transition sm:text-sm sm:leading-6" placeholder="My server">
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="hidden transition-all" id="stage2">
                  <!-- Stage 2 -->
                  <nav class="flex items-center justify-center bg-zinc-700/10 border-b border-white/5 p-4" aria-label="Progress">
                     <p class="text-sm font-medium text-white">Software and location <span class="text-zinc-500 text-normal ml-1">2 / 3</span></p>
                     <ol role="list" class="ml-8 flex items-center space-x-5">
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-zinc-600/50"></a></li>
                     </ol>
                  </nav>
                  <div class="pb-2 p-10">
                     <h2 class="text-base font-semibold leading-7 text-white">Software and location</h2>
                     <p class="mt-1 pb-8 text-sm leading-6 text-zinc-500">Select details for your server such as the software and location.</p>
                  </div>
                  <div class="pb-2 px-10 pt-8 pb-8 border-t border-white/5">
                     <label for="location" class="block text-sm font-normal leading-6 text-white mb-2">Location</label>
                     <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5 mt-2 w-1/2">
                        <% for (let [id, location] of Object.entries(settings.api.client.locations)) { %>
                        <div class="flex-shrink-0 cursor-pointer" onclick="selectLocation('<%= id %>')">
                           <div id="locationCard<%= id %>" class="px-6 py-4 border border-zinc-600/20 bg-zinc-600/10 flex items-center transition rounded-3xl">
                              <!-- Flag -->
                              <img src="https://raw.githubusercontent.com/swantzter/square-flags/master/png/1x1/512/<%= (location.iso).toLowerCase() %>.png" alt="<%= location.iso %>" class="w-12 h-12 mr-4 rounded-2xl bg-white/5 p-1.5">
                              <!-- City and Country -->
                              <div>
                                 <h3 class="text-lg font-semibold text-white"><%= location.city %></h3>
                                 <p class="text-sm text-zinc-400"><%= location.country %></p>
                              </div>
                           </div>
                        </div>
                        <% } %>
                     </div>
                     <label for="software" class="block text-sm font-normal leading-6 text-white mb-2 mt-8">Software</label>
                     <div class="mt-2">
                        <select style="background: #1c1d20;" name="software" class="block w-96 rounded-full border-none py-3 pl-6 bg-zinc-600/20 text-white ring-1 ring-inset ring-zinc-600/30 placeholder:text-zinc-500 focus:ring-1 focus:ring-inset focus:ring-blue-400 transition sm:text-sm sm:leading-6">
                           <% for (let [name, value] of Object.entries(settings.api.client.eggs)) { %>
                           <option value="<%= name %>"><%= value.display %></option>
                           <% } %>
                        </select>
                     </div>
                  </div>
               </div>
               <script>
                  let selectedLocation = '<%= Object.keys(settings.api.client.locations)[0] %>'; // Default selected location
                  
                  function selectLocation(locationId) {
                      // Remove border from previously selected card
                      document.getElementById(`locationCard${selectedLocation}`).classList.remove('border-zinc-700');
                      
                      // Add border to the newly selected card
                      document.getElementById(`locationCard${locationId}`).classList.add('border-zinc-700');
                      
                      // Update the selected location
                      selectedLocation = locationId;
                  }
               </script>
               <div class="hidden transition-all" id="stage3">
                  <!-- Stage 3 -->
                  <nav class="flex items-center justify-center bg-zinc-700/10 border-b border-white/5 p-4" aria-label="Progress">
                     <p class="text-sm font-medium text-white">Resources and settings <span class="text-zinc-500 text-normal ml-1">3 / 3</span></p>
                     <ol role="list" class="ml-8 flex items-center space-x-5">
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                        <li><a class="block h-2.5 w-2.5 rounded-full bg-blue-400 hover:bg-blue-300 transition"></a></li>
                     </ol>
                  </nav>
                  <div class="pb-2 p-10">
                     <h2 class="text-base font-semibold leading-7 text-white">Resources and settings</h2>
                     <p class="mt-1 pb-8 text-sm leading-6 text-zinc-500">Finish the server creation process by choosing your RAM, CPU and storage amounts.</p>
                  </div>
                  <div class="pb-2 px-10 pt-8 pb-8 border-t border-white/5">
                     <div class="grid grid-cols-1 gap-x-6 sm:grid-cols-6">
                        <div class="sm:col-span-3">
                           <div>
                              <div class="relative mb-4 w-96">
                                 <label for="first-name" class="block text-sm font-normal leading-6 text-white mb-2">Memory <span id="memory-value" class="text-zinc-400 ml-1">1 GiB</span></label>
                                 <input name="ram" id="ram" type="range" step="512" value="1024" min="1024" max="4096" class="w-96 h-2 mt-2 mb-2 bg-zinc-600/20 rounded appearance-none cursor-pointer">
                                 <span class="text-sm text-zinc-500 absolute start-0 -bottom-6">1 GiB</span>
                                 <span class="text-sm text-zinc-500 absolute end-0 -bottom-6">8 GiB</span>
                              </div>
                              <div class="relative mb-8 w-96">
                                 <label for="first-name" class="block text-sm font-normal leading-6 text-white mb-2 mt-16">Storage <span id="storage-value" class="text-zinc-400 ml-1">1 GiB</span></label>
                                 <input name="disk" id="disk" type="range" step="1024" value="1024" min="1024" max="10240" class="w-96 h-2 mt-2 mb-2 bg-zinc-600/20 rounded appearance-none cursor-pointer">
                                 <span class="text-sm text-zinc-500 absolute start-0 -bottom-6">1 GiB</span>
                                 <span class="text-sm text-zinc-500 absolute end-0 -bottom-6">100 GiB</span>
                              </div>
                              <div class="relative mb-8 w-96">
                                 <label for="first-name" class="block text-sm font-normal leading-6 text-white mb-2 mt-16">CPU <span id="cpu-value" class="text-zinc-400 ml-1">0.5</span></label>
                                 <input name="cpu" id="cpu" type="range" step="50" value="50" min="50" max="100" class="w-96 h-2 mt-2 mb-2 bg-zinc-600/20 rounded appearance-none cursor-pointer">
                                 <span class="text-sm text-zinc-500 absolute start-0 -bottom-6">0.5</span>
                                 <span class="text-sm text-zinc-500 absolute end-0 -bottom-6">5.0</span>
                              </div>
                              <script>
                                 document.addEventListener('DOMContentLoaded', function () {
                                     // Get the necessary elements
                                     var rangeInput = document.getElementById('ram');
                                     var memoryValue = document.getElementById('memory-value');
                                 
                                     // Add event listener to the slider for 'input' event
                                     rangeInput.addEventListener('input', function () {
                                         // Update the content of the span with the current slider value
                                         memoryValue.textContent = rangeInput.value/1024 + ' GiB';
                                     });
                                 });
                              </script>
                              <script>
                                 document.addEventListener('DOMContentLoaded', function () {
                                     // Get the necessary elements
                                     var rangeInput2 = document.getElementById('disk');
                                     var memoryValue2 = document.getElementById('storage-value');
                                 
                                     // Add event listener to the slider for 'input' event
                                     rangeInput2.addEventListener('input', function () {
                                         // Update the content of the span with the current slider value
                                         memoryValue2.textContent = rangeInput2.value/1024 + ' GiB';
                                     });
                                 });
                              </script>
                              <script>
                                 document.addEventListener('DOMContentLoaded', function () {
                                     // Get the necessary elements
                                     var rangeInput3 = document.getElementById('cpu');
                                     var memoryValue3 = document.getElementById('cpu-value');
                                 
                                     // Add event listener to the slider for 'input' event
                                     rangeInput3.addEventListener('input', function () {
                                         // Update the content of the span with the current slider value
                                         memoryValue3.textContent = rangeInput3.value/100 + ' Core(s)';
                                     });
                                 });
                              </script>
                              <style>
                                 input[type="range"]::-webkit-slider-thumb {
                                 -webkit-appearance: none; /* Override default look */
                                 appearance: none;
                                 background-color: #3d3f46;
                                 height: 1.5rem;
                                 width: 0.5rem;    
                                 border-radius: 6px;
                                 }
                              </style>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <div class="p-10 border-t border-white/5 flex items-center justify-start gap-x-2">
                  <button onclick="backButtonClick()" id="backBtn" class="rounded-full bg-zinc-600/20 px-6 py-2 text-sm font-medium text-zinc-300 ring-1 ring-inset ring-zinc-600/30 sm:order-none">Back</button>
                  <button onclick="nextButtonClick()" id="nextBtn" class="rounded-full bg-blue-400/10 px-6 py-2 text-sm font-medium text-blue-400 ring-1 ring-inset ring-blue-400/20 sm:order-none">Continue</button>
               </div>
            </div>
         </main>
      </div>
      </div>
      <script>
         function redirectWithQueryParams() {
           // Get input values
           const name = document.getElementsByName('name')[0].value;
           const location = selectedLocation;
           const software = document.getElementsByName('software')[0].value;
           const ram = document.getElementById('ram').value;
           const disk = document.getElementById('disk').value;
           const cpu = document.getElementById('cpu').value;
         
           // Construct the query string
           const queryString = `?name=${name}&location=${location}&egg=${software}&ram=${ram}&disk=${disk}&cpu=${cpu}`;
         
           // Redirect to /create with query parameters
           window.location.href = '/create' + queryString;
         }
      </script>
   </body>
</html>
